<!-- REQUIRED SCRIPTS -->

<!-- jQuery -->
<script src="/admin/plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap -->
{{!-- <script src="admin/plugins/bootstrap/js/bootstrap.bundle.min.js"></script> --}}
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
    integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
    crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
    integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
    crossorigin="anonymous"></script>

<script src="/admin/assets/js/tags.min.js"></script>

<!-- AdminLTE -->
<script src="/admin/assets/js/adminlte.js"></script>

<script src="/admin/assets/js/demo.js"></script>

<script>
    /*
   $('#tags').tagsInput();

   $('#tags_tag').keypress(async function () {
       const response = await fetch(`/admin-panel/tags/${$(this).val()}`)
       const tags = await response.json();
       console.log(tags)
   }) */

</script>

<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript" src="/matjri/assets/js/init-io.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.28.0/moment.min.js"
    integrity="sha512-Q1f3TS3vSt1jQ8AwP2OuenztnLU6LwxgyyYOG1jgMW/cbEMHps/3wjvnl1P3WTrF3chJUWEoxDUEjMxDV8pujg=="
    crossorigin="anonymous"></script>
<script>
    function getCookie(cname) {
        var name = cname + '=';
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return '';
    }
    // JoinChatPage
    notificationSocket.emit('joinChatPage', {
        userId: getCookie('_user')
    })
    const chatLists = [...document.querySelectorAll('.chat_list')];
    const latestTextedUsers = [...document.querySelectorAll('.latest-texted-user-list')];
    const messageHistory = document.querySelector('.msg_history')
    const form = document.querySelector('.input_msg_write');
    const inputMsg = document.querySelector('.write_msg');
    const typingDiv = document.getElementById('typing');
    const messagesAlert = document.querySelector('.messages-notification-alert')
    let to;
    let id_to;
    let skip = 0;
    const spinner = document.createElement('div')
    spinner.innerHTML = `<i class="fas fa-spinner fa-spin"></i>`
    const from = getCookie('_user')
    var isTyping = false;
    var timeout = undefined;


    if (form)
        form.addEventListener('submit', function (e) {
            e.preventDefault();
            const msg = e.target.elements.msg.value.trim();
            if (msg != '') {
                // Socket Emit Msg to Server
                chatSocket.emit('chatMsg', {
                    msg,
                    from,
                    to,
                });

                //Emit Notification Theres a message
                chatSocket.emit('msgNotification', {
                    msg,
                    from,
                    to
                })

                // Check Seen Or Not
                outgoingMsg(msg, Date.now(), false, 'bottom');
                e.target.elements.msg.value = '';
                e.target.elements.msg.focus();
                prependToTop(to, msg);
                messageHistory.scrollTop = messageHistory.scrollHeight;
                chatSocket.emit('read');
            }
        })

    // Listen to Messages
    chatSocket.on('chatMsg', ({ msg, date, image }) => {
        incomingMsg(msg, date, image, 'bottom');
        messageHistory.scrollTop = messageHistory.scrollHeight;
    });

    // Listen For Typing ...

    if (inputMsg)
        inputMsg.addEventListener('keypress', onKeyDown);

    chatSocket.on('typing', () => {
        typingDiv.innerHTML = 'Typing ...';
        messageHistory.scrollTop = messageHistory.scrollHeight;
    });

    chatSocket.on('stopTyping', () => {
        typingDiv.innerHTML = '';
    });

    function timeoutFunction() {
        isTyping = false;
        chatSocket.emit('stopTyping');
    }

    function onKeyDown(e) {
        if (!isTyping && e.which !== 13) {
            isTyping = true;
            chatSocket.emit('typing');
            timeout = setTimeout(timeoutFunction, 1000);
        } else {
            clearTimeout(timeout);
            timeout = setTimeout(timeoutFunction, 1000);
        }
    }

    chatSocket.on('read', read => {
        if (read) {
            const readDiv = document.querySelector('.outgoing_msg:last-child .read')
            readDiv.setAttribute('data-read', 'true')
            readDiv.innerHTML = '<i class="icon-double-check"></i>';
        }
    })
    chatSocket.on('chatOpen', () => {
        const readDivS = document.querySelectorAll('.outgoing_msg .read')
        readDivS.forEach(r => {
            if (r.getAttribute('data-read') === 'false') {
                r.setAttribute('data-read', 'true')
                r.innerHTML = '<i class="icon-double-check"></i>';
            }
        })
    })

    //outoutMessage
    function incomingMsg(msg, date, image, postion = 'top') {
        const div = document.createElement('div');
        div.classList.add('incoming_msg');
        div.innerHTML = `
             <div class="incoming_msg_img">
             <img src="${image}" alt="sunil">
             </div>
            <div class="received_msg">
            <div class="received_withd_msg">
            <p>${msg}</p>
            <span class="time_date">${moment(date).calendar()}</span>
            </div>
            </div>`;
        if (postion === 'top') messageHistory.prepend(div);
        else messageHistory.append(div);
    }

    //outoutMessage
    function outgoingMsg(msg, date, read, postion = 'top') {
        const div = document.createElement('div');
        div.classList.add('outgoing_msg');
        if (read) read = '<i class="icon-double-check"></i>'
        else read = '<i class="icon-check"></i>'
        div.innerHTML = `
        <div class="sent_msg">
            <p>${msg}</p>
            <span class="time_date">${moment(date).calendar()}</span >
            <div class="read" data-read="false">${read}</div>
        </div >`;
        if (postion === 'top') messageHistory.prepend(div);
        else messageHistory.append(div);
    }

    // Listen To Notifications
    notificationSocket.on(
        'noti',
        ({ from, msg, fullName, image, appendDotNoti }) => {
            prependToTop(from, msg, fullName, image, appendDotNoti);
        }
    );

    function prependToTop(id, msg, fullName, image, appendDotNoti = false) {
        let flag = true;
        if (chatLists.length > 0) {
            chatLists.forEach(c => {
                if (c.getAttribute('href') === id) {
                    flag = false;
                    c.querySelector('.chat_side_msg').innerHTML = msg;
                    c.querySelector('.chat_date').innerHTML = moment().calendar();
                    if (appendDotNoti) {
                        c.querySelector('.dot-of-chat-page').style.display = 'inline-block'
                        messagesAlert.style.display = 'inline-block'
                    }
                    document.querySelector('.inbox_chat').prepend(c);
                }
            })
            if (flag) {
                const chat_list = createChatList(
                    id,
                    fullName,
                    image,
                    msg,
                    moment().calendar()
                );
                if (appendDotNoti) {
                    chat_list.querySelector('.dot-of-chat-page').style.display =
                        'inline-block';
                    messagesAlert.style.display = 'inline-block';
                }
                chatLists.push(chat_list);
                document.querySelector('.inbox_chat').prepend(chat_list);
            }
        }
        latestTextedUsers.forEach(c => {
            if (c.getAttribute('data-texted') === id) {
                flag = false;
                c.querySelector('.list-msg').innerHTML = msg;
                c.querySelector('.list-date').innerHTML = moment().calendar();
                if (appendDotNoti) {
                    let num = parseInt(c.querySelector('.dot-chat-list').textContent);
                    if (isNaN(num)) num = 0
                    c.querySelector('.dot-chat-list').innerHTML = num + 1;
                    messagesAlert.style.display = 'inline-block'
                }

                document.querySelector('.chat-box').prepend(c);
            }
        })
        if (flag) {
            const list = createChatNoti(id, fullName, image, msg, moment().calendar());
            messagesAlert.style.display = 'inline-block';
            latestTextedUsers.push(list);
            document.querySelector('.chat-box').prepend(list);
        }
    }

    function showSpinner() {
        messageHistory.prepend(spinner);
        setTimeout(() => {
            spinner.remove();
        }, 5000);
    }
    // Lazy Load Of Message History
    if (messageHistory)
        messageHistory.addEventListener('scroll', function () {
            if (this.scrollTop === 0) {
                showSpinner()
                skip += 10
                chunkOfData(id_to, skip)
                this.scrollTop = 10
            }
        });

    async function chunkOfData(id_to, skip = 0) {
        await fetch('/get-messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: id_to,
                skip: skip
            })
        })
            .then(res => res.json())
            .then(({ conversition, image }) => {
                conversition.forEach(conv => {
                    if (conv.from === from)
                        outgoingMsg(conv.msg, conv.createdAt, conv.read)
                    else
                        incomingMsg(conv.msg, conv.createdAt, image)
                })
                spinner.remove();
            })
            .catch(error => console.log(error))
    }

    //on load
    window.onload = function () {
        let flag = true;
        // if (document.querySelector('.inbox_chat'))
        //   document.querySelector('.inbox_chat').firstElementChild.click();
        const getLastItem = (thePath) =>
            thePath.substring(thePath.lastIndexOf('/') + 1);
        chatLists.forEach((c) => {
            if (c.getAttribute('href') === getLastItem(window.location.href)) {
                chatListsRunner();
                c.click();
                flag = false;
                history.pushState('', ' ', 'messages');
            }
        });
        if (flag) {
            fetch(`/chat/not-found/${getLastItem(window.location.href)}`)
                .then((res) => res.json())
                .then((data) => {
                    const chat_list = createChatList(data._id, data.fullName, data.image);
                    document.querySelector('.inbox_chat').prepend(chat_list);
                    chatLists.push(chat_list);
                    chatListsRunner();
                    chat_list.click();
                });
        }
    };

    function chatListsRunner() {
        chatLists.forEach((element) => {
            element.onclick = async function (e) {
                e.preventDefault();
                chatSocket.emit('leaveRoom');
                //Active
                chatLists.forEach((active) => {
                    active.classList.remove('active_chat');
                });
                element.classList.add('active_chat');

                to = element.getAttribute('href');
                // Emit Join Chat
                chatSocket.emit('joinChat', {
                    from,
                    to,
                });
                element.querySelector('.dot-of-chat-page').style.display = 'none';
                messageHistory.innerHTML = '';
                id_to = this.getAttribute('href');
                skip = 0;
                await chunkOfData(id_to);
                messageHistory.scrollTop = messageHistory.scrollHeight;

                //remove the dot Noti from list
                latestTextedUsers.forEach((l) => {
                    if (id_to === l.querySelector('a').getAttribute('data-texted')) {
                        l.querySelector('.dot-chat-list').innerHTML = '';
                    }
                });
            };
        });
    }

    function createChatList(userId, fullName, image, msg = '', date = '') {
        const chat_list = document.createElement('a');
        chat_list.setAttribute('href', userId);
        chat_list.classList.add('chat_list');
        chat_list.style.display = 'block';
        chat_list.innerHTML = `
<div class="chat_people">
      <div class="chat_img"><img src="${image}" alt="sunil"></div>
      <div class="chat_ib">
          <h5>${fullName}<span class="chat_date">${date}</span>
          </h5>
          <p class="chat_side_msg">${msg}</p>
      </div>
      <div class="dot-of-chat-page">
          <i class="fas fa-circle"></i>
      </div>
</div>
`;
        return chat_list;
    }

    function createChatNoti(userId, fullName, image, msg = '', date = '') {
        const list = document.createElement('a');
        list.classList.add('latest-texted-user-list', 'dropdown-item');
        list.setAttribute('href', `/admin-panel/chat/${userId}`)
        list.setAttribute('data-texted', userId)
        list.innerHTML = `
        <div class="media">
                <img src="${image}" alt="User Avatar" class="img-size-50 img-circle mr-3">
                    <div class="media-body">
                        <h3 class="dropdown-item-title">
                            ${fullName}

                            <span class="float-right text-sm text-danger dot-chat-list">
                                1
                             </span>
                        </h3>
                        <p class="text-sm list-msg">${msg}</p>
                        <p class="text-sm text-muted list-date"><i class="far fa-clock mr-1"></i>${date}</p>
                    </div>
          </div>`;
        return list
    }

    const messageIcon = document.querySelector('.messages-dropdown')
    if (messageIcon)
        messageIcon.onclick = function () {
            messagesAlert.style.display = 'none'
        }
</script>